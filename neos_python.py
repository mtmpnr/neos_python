# -*- coding: utf-8 -*-
"""Neos_python.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1MEpJIoyW88KS_co2ZJQ-d5iATwoxXIoI

## PYTHON PROGRAMLAMA

 Etkileşimli kabuk aracılığıyla Python programlama dilinde ilk
adımlarımızı atmaya başlayabiliriz.
"""

"Merhaba Acımasız Dünya"

"""###Karakter Dizilerine Giriş

Teknik olarak , yukarıda yazdığımız “Merhaba Acımasız Dünya!” ifadesi bir
karakter dizisidir. İngilizcede buna string adı verilir ve programlama açısından son derece
önemli bir kavramdır bu. Kavramın adından da rahatlıkla anlayabileceğiniz gibi, bir veya daha
fazla karakterden oluşan öğelere karakter dizisi (string) diyoruz.
"""

"Artificial Intelligence"

" "

'Neos Yazılım'

"""Eğer herhangi bir verinin tipini merak ediyorsanız, **type()**
adlı bir fonksiyondan yararlanarak o verinin tipini sorgulayabilirsiniz.
"""

type("AI")

"Mehmet "+"Tahir "+"Memili "

"Neos"+"Yazılım"

"""Bu arada, karakter dizilerini birleştirmek için mutlaka + işareti kullanmak zorunda değiliz.
 "+" işareti yerine "." kullanmasanız da Python sizin karakter dizilerini birleştirmek istediğinizi rahatlıkla anlar.

"""

"www"".""google"".""com"

"Mehmet"*3

"""###Sayılara Giriş"""

type(20)

type(2.3)

type(10+2j)

type("20")

25+45

"25"+"45"

10+"30"

"""###Tip Dönüşümleri"""

type(13)

type(13.0)

float(12)

a=int(13.2)

type(a)

str(55)

type(str(55))

"""###Değişkenler"""

a=5

b=3

a+b

a/b

a*b

c=a+b

c

"""**Değişken Adı Belirleme Kuralları**

1. Değişken adları bir sayı ile başlayamaz.

2. Değişken adları aritmetik işleçlerle başlayamaz.

3. Değişken adları ya bir alfabe harfiyle ya da _ işaretiyle başlamalıdır.

4. Değişken adları içinde Türkçe karakterler kullanabilirsiniz. Ancak ileride beklenmedik uyum
sorunları çıkması ihtimaline karşı değişken adlarında Türkçe karakter kullanmaktan kaçınmak
isteyebilirsiniz.

5. Aşağıdaki kelimeleri değişken adı olarak kullanamazsınız:

'False', 'None', 'True', 'and', 'as', 'assert', 'async', 'await', 'break',
˓→'class', 'continue', 'def', 'del',
'elif', 'else', 'except', 'finally', 'for', 'from', 'global', 'if', 'import',
˓→'in', 'is', 'lambda', 'nonlocal',
'not', 'or', 'pass', 'raise', 'return', 'try', 'while', 'with', 'yield'

"""

try="Deniyorum ama olmuyor"

"""Eğer yukarıdaki listeyi unutursanız hatırlamak için **import keyword** komutunu ardından **keyword.kwlist** komutunu yazarak kullanabilirsiniz."""

import keyword

keyword.kwlist

len("Mehmettahirmemili")

len("mehmet tahir memili")

"""6. Yukarıdaki kelimeler dışında, Python programlama diline ait fonksiyon ve benzeri
araçların adlarını da değişken adı olarak kullanmamalısınız. Örneğin yazdığınız programlarda
değişkenlerinize type veya len adı vermeyin. Çünkü ‘type’ ve ‘len’ Python’a ait iki önemli
fonksiyonun adıdır. Eğer mesela bir değişkene type adını verirseniz, o programda artık type()
fonksiyonunu kullanamazsınız:

"""

type=24

type(24)

del type

type(24)

"""7. Değişken adlarını belirlerken, değişkeni oluşturan kelimeler arasında boşluk bırakılamaz.


"""

Kullanıcı numarası=2345

Kullanıcı_numarası=2345

"""Örnek:

1. Cumartesi-Pazar günleri çalışmıyoruz.
2. Ayda 22 gün çalışıyoruz.
3. Evden işe gitmek için kullandığımız vasıtanın ücreti 12 TL
4. İşten eve dönmek için kullandığımız vasıtanın ücreti 14 TL

Aylık yol masrafını hesaplayalım.

masraf = gün sayısı x (gidiş ücreti + dönüş ücreti)
"""

gun_sayısı=22
gidis_ucreti=12
donus_ucreti=14

masraf=gun_sayısı*(gidis_ucreti+donus_ucreti)

masraf

"""Örnek,

Bir kenarı 12cm olan küpün yüzey alanını hesaplayalım.
"""

a=12

yuzey_alanı=6*(a**2)

yuzey_alanı

6*pow(12,2)

"""###Yorum Satırı

Python da yorum satırı demek kullandığınız script te birinin veya sizin bir düşünce ve açıklama belirtiğinizi gösteren gösterimdir.
"#" şeklinde kullanılır.
"""

a=b=6  # Değişkenlere aynı ifadeyi atayabiliriz.

ocak = mart = mayıs = temmuz = ağustos = ekim = aralık = 31
nisan = haziran = eylül = kasım = 30
şubat = 28

ocak

eylül

"""###Print Fonksiyonu

print() fonksiyonunun görevi ekrana çıktı vermemizi sağlamaktır.
"""

a="Bana ne?"

print(a)

"""Tırnak işareti hatası."""

print("Python "programlama" dili")

print("Python 'programlama' dili ")

print(""" Lorem Ipsum, dizgi ve baskı endüstrisinde kullanılan mıgır metinlerdir. Lorem Ipsum, adı bilinmeyen bir matbaacının bir hurufat numune kitabı oluşturmak üzere bir yazı galerisini alarak karıştırdığı 1500'lerden beri endüstri standardı sahte metinler olarak kullanılmıştır. Beşyüz yıl boyunca varlığını sürdürmekle kalmamış, aynı zamanda pek değişmeden elektronik dizgiye de sıçramıştır.
 1960'larda Lorem Ipsum pasajları da içeren Letraset yapraklarının yayınlanması ile ve yakın zamanda Aldus PageMaker gibi Lorem Ipsum sürümleri içeren masaüstü yayıncılık yazılımları ile popüler olmuştur.""")

print("Mehmet","Memili")

"""**sep** operatörü"""

print("T", "C")

print("T", "C", sep=".")

print("Adana", "Mersin", sep="-")

"""**end** operatörü"""

print("Mehmet\nTahir\nMemili")

print("Mehmet","Tahir","Memili",sep="\n")

print(*"Beşiktaş")

"""###String Methodları- upper() & lower()"""

yazılım="neos yazılım"

yazılım.upper()

yazılım.lower()

yazılım.islower()

yazılım.isupper()

"""###replace()

Değiştirme operatörüdür.Neyi ne ile değiştireceğinizi söyersiniz.
"""

yazılım.replace("a","e")

yazılım.replace("ı","i")

yazılım.capitalize()

yazılım.title() #Kelimelerin ilk harflerini büyük yazar

dir(yazılım) # Uygulanabilecek methodlardır.

"""###İnput() Fonksiyonu

Kullanıcıdan bilgi ,giriş almamız yarar.
"""

isim="Tahir"

print("Merhaba",isim)

isim = input("İsminiz nedir? ")
print("Merhaba",isim)

Yarıçap = input("Dairenin Yarıçapını giriniz: ")
Yarıçap=int(Yarıçap)
pi = 3.14159
alan = pi * (Yarıçap * Yarıçap)
print(alan)

"""**format** Methodu"""

print("{} ve {} iyi bir ikilidir".format("Python", "Django"))

print("{} {} 'yi seviyor!".format("Ali", "Ayşe"))

metin = "{} ve {} iyi bir ikilidir"

metin.format("Özkan", "Uğur")

"""#VERİ YAPILARI

##LİSTELER

İçine farklı veri yapılarını alabilen ,konteyner vazifesi görebilen, içerikleri sıralı veri yapısıdır. [ ] şeklinde gösterilir.
"""

liste=[2,4,6,87]

liste

type(liste)

liste2=["Just","like","a","pill"]

liste2

liste3=["Just",2.3,45,"pill"]

liste3

len(liste3)

liste2[0]

liste2[2]

type(liste2[2])

list_toplam=[liste,liste2,liste3]

list_toplam

del list_toplam

"""###Listelerde Eleman İşlemleri"""

liste=[10,20,30,40,50,60]

liste[0]

liste[3]

liste[0:2]

liste[2:]

liste_yeni=["x","y",10,[20,30,40,50]]

liste_yeni

liste_yeni[3]

liste_yeni[3][2]

"""Liste eleman değiştirme

"""

liste=["Mehmet","Tahir","Demir","Pınar"]

liste

liste=liste+["Aysel"]

liste

liste[1]="Ersan"

liste

dir(liste)

"""apppend() & remove()"""

liste=["Ali","Burak","Işık","Berk"]

liste.append("Sıla")

liste

liste.remove("Ali")

liste

"""insert()"""

liste=["ali","ender","ayse"]

liste.insert(0,"burak")

liste

liste.insert(len(liste),"beren")

liste

"""pop()"""

liste.pop(0)

liste

liste.pop("ayse")

"""count()"""

liste=["ali","veli","samet","adil"]

liste.count("ali")

liste.count("a")

liste=[2,2,3,4,72,2]

liste.count(2)

"""copy(),reverse(),extend()"""

liste_copy=liste.copy()

liste_copy

liste.extend(["x","y","z"])

liste

liste.reverse()

liste

"""sort(),clear(),del()"""

liste=[23,1,67,54,98]

liste.sort()

liste

del liste[-1]

liste

liste.clear()

liste

"""##TUPLE

Birden fazla veri tipini barındıran ve değiştirilemeyen veri tipleridir. () şeklinde gösterilir.Pythonda tuple listeleri, list' e benzer ancak farkı tuple  listesine ekleme, silme ve güncelleme yapamayız.
"""

message = ('Hello', 'There.', 'My', 'name', 'is', 'Tahir','Memili')

print(message[2])   # My

print(message[-1])  # Turan

"""##Dictionary (Sözlük)

Python  veri tiplerinden olan dictionary yani sözlük veri yapısı key ve value şeklinde verileri saklayabileceğimiz bir veri yapısıdır. Dictionary veri yapısı Json veri yapısına oldukça benzerdir.

Dictionary liste elemanlarına key ve value değerlerine göre ulaşıp elemanlar üzerinde güncelleme yapabiliriz. (Araç plakası ve il bilgisi gibi. {01: "ADANA"})
"""

sozluk = {"REG" : "Regresyon Modeli",
          "LOJ" : "Lojistik Regresyon",
          "CART" : "Classification and Reg"}

sozluk

len(sozluk)

sozluk = {"REG" : 10,
          "LOJ" : 20,
          "CART" : 30}

sozluk

sozluk = {"REG" : ["RMSE",10],
          "LOJ" : ["MSE", 20],
          "CART" : ["SSE",30]}

sozluk

sozluk[0]

sozluk["REG"]

sozluk = {"REG" : {"RMSE": 10,
                   "MSE" : 20,
                   "SSE" : 30},

          "LOJ" : {"RMSE": 10,
                   "MSE" : 20,
                   "SSE" : 30},

          "CART" : {"RMSE": 10,
                   "MSE" : 20,
                   "SSE" : 30}}

sozluk["REG"]["MSE"]

"""Eleman ekleme & değiştirme"""

sozluk = {"REG" : "Regresyon Modeli",
          "LOJ" : "Lojistik Regresyon",
          "CART" : "Classification and Reg"}

sozluk["GBM"] = "Gradient Boosting Mac"

sozluk

sozluk[1] = "Yapay Sinir Aglari"

sozluk[1]

sozluk

"""##SETLER

Pythonda set listeleri, list' e benzer ancak fark olarak set içindeki elemanlar sıralanamaz (sort) ve indekslenemez yani set elemanlarına 0,1 şeklinde indeks numaraları ile ulaşamayız. Dolayısıyla set 'e eklediğimiz bir elemanın set listesi içinde hangi sırada olacağını bilemeyiz. Ayrıca set içerisindeki elemanlar tekrarlayamaz, her bir elemandan sadece bir tane olmalıdır, tekrarlayanlar silinir. { } Şeklinde gösterilir.
"""

s = set()

dir(s)

l=["Akın","Birol",12,4]

s=set(l)

type(s)

s[0]

l[0]

s.add("Salim")

s

s.remove(12)

s

"""##set(Küme) işlemleri

**difference()** ile iki kumenin farkini ya da "-" ifadesi

**intersection()** iki kume kesisimi ya da "&" ifadesi

**union()** iki kumenin birlesimi

**symmetric_difference()** ikisinde de olmayanlari.
"""

set1 = set([1,3,5,7])
set2 = set([1,2,3,5])

set1.difference(set2)

set2.difference(set1)

set1.symmetric_difference(set2)

set1 - set2

set1.intersection(set2)

set2.intersection(set1)

kesisim = set1 & set2

kesisim

birlesim = set1.union(set2)

birlesim

set1.intersection_update(set2) #intersection_update yöntemi, bir kümenin diğer kümeyle kesişimini alarak kendini günceller. Yani, küme üzerinde değişiklik yapar ve sadece ortak olan elemanları içerir.

set1

set1 = set([7,8,9])
set2 = set([5,6,7,8,9,10])

set1.isdisjoint(set2) #iki kğme keşimi boşmu olup olmadığını sorgular.

set1.issubset(set2)  #Bir kümenin bütün elemanları başka küme içerisinde yer alıyor mu alıyormu.

set2.issuperset(set1)
#bir kumenin bir diger kumeyi kapsayip kapsamadigi

"""##FONKSİYONLAR

Yazdığımız bir python uygulamasındaki belli bir kod parçasını bir kaç yerde kullanma ihtiyacı duyduğumuzda fonksiyon oluşturmak işlerimizi kolaylaştırır. Böyle durumlarda sürekli kullanacak olduğumuz kod satırlarını fonksiyonlar içine alıp istediğimiz zaman çağırıp çalıştırabiliriz.
"""

def hello():
    print("Merhaba")

hello()

"""Fonksiyona parametre gönderme"""

def hello(name):
    print("Merhaba "+ name)

hello("Tahir")

"""Fonksiyonun geriye bilgi göndermesi"""

def hello(name):
    return "Merhaba "+ name

hello("Arda")

print(hello("Arda"))

def kare_al(x):
  print(x**2)

kare_al(7)

def kare_al(x):
    print("Girilen Sayinin Karesi:" + str(x**2))

kare_al(4)

def kare_al(x):
    print("Girilen Sayi:" +
          str(x) +
          ", Karesi:" +
          str(x**2))

kare_al(8)

"""###Iki Argumanli Fonksiyon Tanimlamak"""

def carpma(x, y):
    print(x*y)

carpma(4,5)

"""Ön Tanımlı Argümanlar"""

def carpma_yap(x,y=2):
  print(x*y)

carpma_yap(2)

carpma_yap(5,5)

"""**Docstring Yapısı**

Docstring yazarken dikkat edilmesi gerekenler:

.Yorum satırı ‘#’ şeklinde değil üç tırnak şeklinde olmalı.

.Büyük harf ile başlayıp nokta ile son bulmalı.

.Bir çok satır yazılacaksa parçalar arasında bir satır boşluk olmalı, örnek : kısa açıklama BOŞLUK SATIRI detaylı açıklama BOŞLUK SATIRI vesaire..

.İlk satır her zaman kısa açıklamaya ayrılmalı.

.Docstring’de nasıl yaptığı değil, ne yaptığı anlatılmalı.
"""

?print

def summer(arg1, arg2):
    print(arg1 + arg2)

summer(4,7)

def summer(arg1,arg2):
  """
  İki sayıyı toplar

  Argümanları:
       arg1: int,float
       arg2: int,float

  Return:
      int,float

  """

  print(arg1+arg2)

summer(1,2)

?summer

"""Statment/Body  Bölümü



"""

# def function_name(parameters/arguments):
#     statements (function body)

def multiplication(a, b):
    c = a * b
    print(c)

multiplication(3,2)

"""girilen değerleri bir liste içinde saklayacak fonksiyon."""

list = []


def add_element(a, b):
    c = a * b
    list.append(c)
    print(list)

add_element(3,5)

def calculate(value,coef):
  print((value*coef)/100)

calculate(34,1.5)

"""Fonksiyon çıktılarını girdi olarak kullanmak

**return** ifadesinin kullanımı
"""

def calculate(value,coef):
  return((value*coef)/100)

s=calculate(60,2.5)

s

def calculate(value,coef):
  beta1=value*coef
  beta2=(value**2)*coef
  output=beta1+beta2
  return beta1,beta2, output

type(calculate(50,1,5))

beta1,beta2,output=calculate(50,1.6)

beta1

beta2

output

"""Fonksiyon içinde fonksiyon çağırma"""

def calculate(varm, moisture, charge):
    return int((varm + moisture) / charge)

def standart(a, p):
    return a * 10 / 100 * p * p

def all_calculation(varm, moisture, charge, p):
    a = calculate(varm, moisture, charge)
    b = standart(a, p)
    print(b * 10)

all_calculation(40,90,100,1.5)

"""###Local & Global Variables

Fonksiyonlarda tanımlanan değişkenler **yerel değişkenler** olarak adlandırılır. Yerel değişkenlerle kastettiğimiz şey değişkenlerin fonksiyona özgü olması ve fonksiyonun işi bittikten sonra bellekten silinip kaybolmasıdır. Böyle değişkenlere başka bir yerden erişilemez.

**Global Değişkenler** Python’da bir fonksiyonun dışında ya da global kapsamda bildirilen değişkenlerdir. Yani Global Değişkenler’e fonksiyonun içinde veya dışında erişebiliriz.


"""

def fonksiyon():
  m=10
  print(m)

fonksiyon()

print(m)

list = [1, 2, 3]

def add_element(a, b):
    c = a * b
    list.append(c)
    print(list)

add_element(3, 9)

"""## CONDITIONS (Koşullar)

Bir koşulun True ya da False olan sonucuna göre farklı kod blokları oluşturmak için If komutunu kullanırız.

Aşağıda bazı koşul ifadeleri verilmiştir. Bu koşullar bize True ya da False değer üretirler.

Eşit mi : a == b,

Eşit değil mi: a != b

Küçük mü : a < b

Küçük ya da eşit mi: a <= b

Büyük mü: a > b

Büyük ya da eşit mi: a >= b

###IF KOŞULU
"""

if 1 == 1:
    print("evet doğru")

if 1 == 2:
    print("something")

number = 9

if number == 10:
    print("number is 10")

number = 10

if number == 10:
    print("number is 10")

a = 10
b = 20
if b > a:
  print("b, a'dan büyüktür")

def check(number):
    if number == 10:
        print("number is 10")

check(10)

"""###ELSE

Bazen birden fazla koşul yazmak isteriz bu durumda eğer ilk if bloğundaki koşul False değer üretirse Elif bloğunda tanımladığımız koşula bakılır.
"""

def check(number):
    if number == 10:
        print("number is 10")
    else:
        print("number is not 10")

check(12)

"""###ELIF"""

a = 15
b = 10
if b > a:
  print("b, a'dan büyüktür")
elif a == b:
  print("a ile b eşittir")
else:
  print("a, b'den büyüktür")

def check(number):
    if number > 10:
        print("greater than 10")
    elif number < 10:
        print("less than 10")
    else:
        print("equal to 10")

check(16)

"""#LOOPS (DÖNGÜLER)

###**FOR DÖNGÜSÜ**

Python for döngülerini bir eleman grubundaki (list, tuple, dictionary, set ya da string) her bir elemana ulaşmak için kullanırız.
"""

students = ["John", "Mark", "Tilly", "Kadir"]

students[0]

students[2]

for x in students:
  print(x)

for student in students:
  print(student)

for student in students:
    print(student.upper())

sayilar = [1,2,3,4,5]
for sayi in sayilar:
   print(sayi)

sayilar = [1,2,3,4,5]
for sayi in sayilar:
   print(sayi**2)

salaries = [12500, 20000, 30000, 40000, 50000]

for x in salaries:
    print(x*20/100 + x)

for x in salaries:
    print(int(x*20/100 + x))

def new_salary(salary, rate):
    return int(salary*rate/100 + salary)

new_salary(15000,10)

for i in salaries:
    print(new_salary(i, 20))

for salary in salaries:
    if salary > 20000:
        print(new_salary(salary, 10))
    else:
        print(new_salary(salary, 20))

def alternating(string):
  new=""
  for string_index in range(len(string)):
    if string_index%2==0:
      new+= string[string_index].upper()
    else:
      new+=string[string_index].lower()
  print(new)

alternating("neos")

alternating("mehmettahirmemili")

"""###Break & Continue & while"""

numbers=[1,2,3,4,5,6]

for i in numbers:
  if i ==4:
    break
  print(i)

numbers=[1,2,3,4,5,6]

for i in numbers:
  if i ==4:
    continue
  print(i)

"""###while

While döngülerinde belirttiğimiz bir koşul doğru olduğu sürece while bloğu içerisinde tanımladığımız kod satırlarını tekrarlatabiliriz.

"""

i = 1
while i < 5:
  print(i)
  i += 1

x = 1
while x <= 100:
    if x % 2==1:
        print(f'sayı tek: {x}')
    else:
        print(f'sayı çift: {x}')
    x += 1

print('bitti...')

"""###Enumerate

Otomatik indeks üretici , for loop ile kullanılır. iterasyon yaparken iterasyon  yaptığımız elemanların index bilgisinide tutup bu index bilgisiyle işlem yapmak istersek işimize yarar.
"""

students = ["John", "Mark", "Tilly", "Kadir"]

for index, student in enumerate(students):
    print(index, student)

A = []
B = []

for index, student in enumerate(students):
    if index % 2 == 0:
        A.append(student)
    else:
        B.append(student)

A

B

"""###LAMBDA & MAP & FILTER & REDUCE

**Lambda**
"""

def summer(x, y):
    return x + y

summer(1,5)*10

new_sum=lambda x,y :x+y

new_sum(2,3)

a = lambda a, b, c : a + b + c
print(a(2, 3, 4))

"""**Map**

Pythonda map fonksiyonu aracılığıyla referansı belirtilen bir fonksiyona belirtilen bir listenin tüm elemanları sırayla gönderilip liste üzerinde istenilen yapılandırılma yapılır.
"""

numbers = [1,3,5,9,10,4]

def square(num):
       return num ** 2

result = list(map(square, numbers))

result

numbers = [1,3,5,9,10,4]
result = list(map(lambda num: num ** 2, numbers)) # [1,9,25,81,100,16]

result

"""**Filter**

Map fonksiyonunda liste içerisindeki her bir sayı fonksiyona gönderilip bir işlem görüyor ve geriye gönderiliyor ancak filter metodu ile geriye dönecek sayılara bir filtre uygulayabiliriz. Kullanım sıklığı çok azdır.
"""

numbers = [1,3,5,9,10,4]
result = list(filter(lambda num: num%2==0,numbers))

result

"""**Reduce**

indirgeme yapmak demektir.
"""

from functools import reduce
list = [1, 2, 3, 4, 5]
reduce(lambda a, b: a + b, list)

"""##COMPREHENSION
Birden fazla satırda yapılacak işlemleri istediğimiz formatta tek bir satırda yapma imkanı sağlayan yapılardır.

###**List Comprehension**
"""

sell = [1000, 2000, 3000, 4000, 5000]

def new_sell(x):
    return x * 20 / 100 + x

for s in sell:
    print(new_sell(s))

null_list = []

for s in sell:
    null_list.append(new_sell(s))

null_list

for s in sell:
    if s > 3000:
        null_list.append(new_sell(s))
    else:
        null_list.append(new_sell(s * 2))

null_list

salaries = [1000, 2000, 3000, 4000, 5000]

def new_salary(x):
    return x * 20 / 100 + x

[new_salary(salary * 2) if salary < 3000 else new_salary(salary) for salary in salaries]

"""1-[for salary in salaries]

2-[salary*2 for salary in salaries]

3-[salary*2 for salary in salaries if salary<3000] Tek bir if kullanacaksak İf bloğu en sağa yazılır.

4-[new_salary(salary*2) if salary <3000 else new_salary(salary*0.2) for salary in salaries] Eğer else bloğu ile kullanılacaksa for döngüsü en sağa yazılır.
"""

[new_salary(salary * 2) if salary < 3000 else new_salary(salary * 0.2) for salary in salaries]

students = ["Ali", "Ahmet", "Sultan", "Meryem"] #istediğim öğrenciler listesi büyük harf
students_no = ["Ali", "Sultan"] #istemediğim öğrenciler listesi küçük harf

[student.lower() if student in students_no else student.upper() for student in students]

"""##**Dict Comprehension**"""

dictionary = {'a': 10,
              'b': 20,
              'c': 30,
              'd': 40}

dictionary.keys()

dictionary.values()

dictionary.items() # her bir elemana tuple olarak erişmek istersek

{k.upper(): v*2 for (k,v) in dictionary.items() }

